{"ast":null,"code":"/**\r\n * API Client for DHSILED Command Center\r\n * Handles REST API calls to backend server\r\n */\n\nclass ApiClient {\n  constructor(baseUrl = 'http://localhost:5000/api') {\n    this.baseUrl = baseUrl;\n    this.defaultHeaders = {\n      'Content-Type': 'application/json'\n    };\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const config = {\n      method: options.method || 'GET',\n      headers: {\n        ...this.defaultHeaders,\n        ...options.headers\n      }\n    };\n    if (options.body) {\n      config.body = JSON.stringify(options.body);\n    }\n    try {\n      const response = await fetch(url, config);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(`API request failed: ${endpoint}`, error);\n      throw error;\n    }\n  }\n\n  // =========================================================================\n  // GRID OPERATIONS\n  // =========================================================================\n\n  async getGrids() {\n    return await this.request('/grids');\n  }\n  async getGrid(gridId) {\n    return await this.request(`/grids/${gridId}`);\n  }\n  async getGridHistory(gridId, hours = 24) {\n    return await this.request(`/grids/${gridId}/history?hours=${hours}`);\n  }\n  async sendGridCommand(gridId, command) {\n    return await this.request(`/grids/${gridId}/command`, {\n      method: 'POST',\n      body: {\n        command\n      }\n    });\n  }\n\n  // =========================================================================\n  // ALERT OPERATIONS\n  // =========================================================================\n\n  async getAlerts(limit = 50, severity = null) {\n    let endpoint = `/alerts?limit=${limit}`;\n    if (severity) {\n      endpoint += `&severity=${severity}`;\n    }\n    return await this.request(endpoint);\n  }\n  async getAlert(alertId) {\n    return await this.request(`/alerts/${alertId}`);\n  }\n  async acknowledgeAlert(alertId, user = 'operator') {\n    return await this.request(`/alerts/${alertId}/acknowledge`, {\n      method: 'POST',\n      body: {\n        user\n      }\n    });\n  }\n\n  // =========================================================================\n  // SYSTEM HEALTH\n  // =========================================================================\n\n  async getSystemHealth() {\n    return await this.request('/health');\n  }\n  async getGridsHealth() {\n    return await this.request('/health/grids');\n  }\n\n  // =========================================================================\n  // ANALYTICS\n  // =========================================================================\n\n  async getOccupancyAnalytics() {\n    return await this.request('/analytics/occupancy');\n  }\n  async getHeatmapData() {\n    return await this.request('/analytics/heatmap');\n  }\n  async getTrends(hours = 24) {\n    return await this.request(`/analytics/trends?hours=${hours}`);\n  }\n\n  // =========================================================================\n  // SYSTEM COMMANDS\n  // =========================================================================\n\n  async broadcastCommand(command) {\n    return await this.request('/system/broadcast', {\n      method: 'POST',\n      body: {\n        command\n      }\n    });\n  }\n\n  // =========================================================================\n  // UTILITY METHODS\n  // =========================================================================\n\n  setBaseUrl(url) {\n    this.baseUrl = url;\n  }\n  setAuthToken(token) {\n    this.defaultHeaders['Authorization'] = `Bearer ${token}`;\n  }\n  removeAuthToken() {\n    delete this.defaultHeaders['Authorization'];\n  }\n}\nexport default ApiClient;","map":{"version":3,"names":["ApiClient","constructor","baseUrl","defaultHeaders","request","endpoint","options","url","config","method","headers","body","JSON","stringify","response","fetch","ok","Error","status","statusText","data","json","error","console","getGrids","getGrid","gridId","getGridHistory","hours","sendGridCommand","command","getAlerts","limit","severity","getAlert","alertId","acknowledgeAlert","user","getSystemHealth","getGridsHealth","getOccupancyAnalytics","getHeatmapData","getTrends","broadcastCommand","setBaseUrl","setAuthToken","token","removeAuthToken"],"sources":["C:/Users/Admin/Desktop/dshield/dhsiled-system/command-center/src/services/api-client.js"],"sourcesContent":["/**\r\n * API Client for DHSILED Command Center\r\n * Handles REST API calls to backend server\r\n */\r\n\r\nclass ApiClient {\r\n    constructor(baseUrl = 'http://localhost:5000/api') {\r\n        this.baseUrl = baseUrl;\r\n        this.defaultHeaders = {\r\n            'Content-Type': 'application/json'\r\n        };\r\n    }\r\n\r\n    async request(endpoint, options = {}) {\r\n        const url = `${this.baseUrl}${endpoint}`;\r\n        \r\n        const config = {\r\n            method: options.method || 'GET',\r\n            headers: {\r\n                ...this.defaultHeaders,\r\n                ...options.headers\r\n            }\r\n        };\r\n\r\n        if (options.body) {\r\n            config.body = JSON.stringify(options.body);\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(url, config);\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n\r\n        } catch (error) {\r\n            console.error(`API request failed: ${endpoint}`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // =========================================================================\r\n    // GRID OPERATIONS\r\n    // =========================================================================\r\n\r\n    async getGrids() {\r\n        return await this.request('/grids');\r\n    }\r\n\r\n    async getGrid(gridId) {\r\n        return await this.request(`/grids/${gridId}`);\r\n    }\r\n\r\n    async getGridHistory(gridId, hours = 24) {\r\n        return await this.request(`/grids/${gridId}/history?hours=${hours}`);\r\n    }\r\n\r\n    async sendGridCommand(gridId, command) {\r\n        return await this.request(`/grids/${gridId}/command`, {\r\n            method: 'POST',\r\n            body: { command }\r\n        });\r\n    }\r\n\r\n    // =========================================================================\r\n    // ALERT OPERATIONS\r\n    // =========================================================================\r\n\r\n    async getAlerts(limit = 50, severity = null) {\r\n        let endpoint = `/alerts?limit=${limit}`;\r\n        if (severity) {\r\n            endpoint += `&severity=${severity}`;\r\n        }\r\n        return await this.request(endpoint);\r\n    }\r\n\r\n    async getAlert(alertId) {\r\n        return await this.request(`/alerts/${alertId}`);\r\n    }\r\n\r\n    async acknowledgeAlert(alertId, user = 'operator') {\r\n        return await this.request(`/alerts/${alertId}/acknowledge`, {\r\n            method: 'POST',\r\n            body: { user }\r\n        });\r\n    }\r\n\r\n    // =========================================================================\r\n    // SYSTEM HEALTH\r\n    // =========================================================================\r\n\r\n    async getSystemHealth() {\r\n        return await this.request('/health');\r\n    }\r\n\r\n    async getGridsHealth() {\r\n        return await this.request('/health/grids');\r\n    }\r\n\r\n    // =========================================================================\r\n    // ANALYTICS\r\n    // =========================================================================\r\n\r\n    async getOccupancyAnalytics() {\r\n        return await this.request('/analytics/occupancy');\r\n    }\r\n\r\n    async getHeatmapData() {\r\n        return await this.request('/analytics/heatmap');\r\n    }\r\n\r\n    async getTrends(hours = 24) {\r\n        return await this.request(`/analytics/trends?hours=${hours}`);\r\n    }\r\n\r\n    // =========================================================================\r\n    // SYSTEM COMMANDS\r\n    // =========================================================================\r\n\r\n    async broadcastCommand(command) {\r\n        return await this.request('/system/broadcast', {\r\n            method: 'POST',\r\n            body: { command }\r\n        });\r\n    }\r\n\r\n    // =========================================================================\r\n    // UTILITY METHODS\r\n    // =========================================================================\r\n\r\n    setBaseUrl(url) {\r\n        this.baseUrl = url;\r\n    }\r\n\r\n    setAuthToken(token) {\r\n        this.defaultHeaders['Authorization'] = `Bearer ${token}`;\r\n    }\r\n\r\n    removeAuthToken() {\r\n        delete this.defaultHeaders['Authorization'];\r\n    }\r\n}\r\n\r\nexport default ApiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}